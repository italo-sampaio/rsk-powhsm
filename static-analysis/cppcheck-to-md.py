import argparse
import os
import xml.etree.ElementTree as ET

def parse_cppcheck_xml(xml_file):
    tree = ET.parse(xml_file)
    root = tree.getroot()

    errors = root.findall('.//error')

    # Check if there are no errors
    if not errors:
        return "No errors found!"

    markdown_table = "| ID | Severity | Message | File | Line | Column |\n"
    markdown_table += "|----|----------|---------|------|------|--------|\n"

    for error in errors:
        id = error.get('id')
        severity = error.get('severity')
        message = error.get('msg')
        location = error.find('location')
        file = location.get('file') if location is not None else ''
        line = location.get('line') if location is not None else ''
        column = location.get('column') if location is not None else ''

        markdown_table += f"| {id} | {severity} | {message} | {file} | {line} | {column} |\n"

    return markdown_table

# Main program
def main():
	parser = argparse.ArgumentParser(description="Convert Cppcheck generated XML report to a GitHub-friendly Markdown")
	parser.add_argument('xml_file', type=str, help="The XML file generated by Cppcheck")
	args = parser.parse_args()

	xml_file = args.xml_file
	# Check if the file exists
	if not os.path.isfile(xml_file):
		print("File not found!")
		exit(1)
	
	output = parse_cppcheck_xml(xml_file)
	# Chenge the inpt file's extension to .md
	output_file = xml_file.replace('.xml', '.md')
	with open(output_file, 'w') as file:
		file.write(output)


if __name__ == "__main__":
	main()
